import { Component, Input } from '@angular/core';
import { FaIconComponent } from './icon.component';
import * as ɵngcc0 from '@angular/core';
export class FaDuotoneIconComponent extends FaIconComponent {
    findIconDefinition(i) {
        const definition = super.findIconDefinition(i);
        if (definition != null && !Array.isArray(definition.icon[4])) {
            throw new Error('The specified icon does not appear to be a Duotone icon. ' +
                'Check that you specified the correct style: ' +
                `<fa-duotone-icon [icon]="['fad', '${definition.iconName}']"></fa-duotone-icon> ` +
                `or use: <fa-icon icon="${definition.iconName}"></fa-icon> instead.`);
        }
        return definition;
    }
    buildParams() {
        const params = super.buildParams();
        if (this.swapOpacity === true || this.swapOpacity === 'true') {
            params.classes.push('fa-swap-opacity');
        }
        if (this.primaryOpacity != null) {
            params.styles['--fa-primary-opacity'] = this.primaryOpacity.toString();
        }
        if (this.secondaryOpacity != null) {
            params.styles['--fa-secondary-opacity'] = this.secondaryOpacity.toString();
        }
        if (this.primaryColor != null) {
            params.styles['--fa-primary-color'] = this.primaryColor;
        }
        if (this.secondaryColor != null) {
            params.styles['--fa-secondary-color'] = this.secondaryColor;
        }
        return params;
    }
}
FaDuotoneIconComponent.ɵfac = /*@__PURE__*/ function () { let ɵFaDuotoneIconComponent_BaseFactory; return function FaDuotoneIconComponent_Factory(t) { return (ɵFaDuotoneIconComponent_BaseFactory || (ɵFaDuotoneIconComponent_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FaDuotoneIconComponent)))(t || FaDuotoneIconComponent); }; }();
FaDuotoneIconComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: FaDuotoneIconComponent, selectors: [["fa-duotone-icon"]], inputs: { swapOpacity: "swapOpacity", primaryOpacity: "primaryOpacity", secondaryOpacity: "secondaryOpacity", primaryColor: "primaryColor", secondaryColor: "secondaryColor" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 0, vars: 0, template: function FaDuotoneIconComponent_Template(rf, ctx) { }, encapsulation: 2 });
FaDuotoneIconComponent.propDecorators = {
    swapOpacity: [{ type: Input }],
    primaryOpacity: [{ type: Input }],
    secondaryOpacity: [{ type: Input }],
    primaryColor: [{ type: Input }],
    secondaryColor: [{ type: Input }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FaDuotoneIconComponent, [{
        type: Component,
        args: [{
                selector: 'fa-duotone-icon',
                template: ``
            }]
    }], null, { swapOpacity: [{
            type: Input
        }], primaryOpacity: [{
            type: Input
        }], secondaryOpacity: [{
            type: Input
        }], primaryColor: [{
            type: Input
        }], secondaryColor: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVvdG9uZS1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9pY29uL2R1b3RvbmUtaWNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOztBQU1uRCxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsZUFBZTtBQUMzRCxJQXlDWSxrQkFBa0IsQ0FBQyxDQUE0QjtBQUFJLFFBQzNELE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuRCxRQUNJLElBQUksVUFBVSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO0FBQ2xFLFlBQU0sTUFBTSxJQUFJLEtBQUssQ0FDYiwyREFBMkQ7QUFDbkUsZ0JBQVUsOENBQThDO0FBQ3hELGdCQUFVLHFDQUFxQyxVQUFVLENBQUMsUUFBUSx5QkFBeUI7QUFDM0YsZ0JBQVUsMEJBQTBCLFVBQVUsQ0FBQyxRQUFRLHVCQUF1QixDQUN2RSxDQUFDO0FBQ1IsU0FBSztBQUNMLFFBQ0ksT0FBTyxVQUFVLENBQUM7QUFDdEIsSUFBRSxDQUFDO0FBQ0gsSUFDWSxXQUFXO0FBQ3ZCLFFBQUksTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3ZDLFFBQ0ksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsV0FBVyxLQUFLLE1BQU0sRUFBRTtBQUNsRSxZQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDN0MsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksRUFBRTtBQUNyQyxZQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQzdFLFNBQUs7QUFDTCxRQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksRUFBRTtBQUN2QyxZQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0JBQXdCLENBQUMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDakYsU0FBSztBQUNMLFFBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtBQUNuQyxZQUFNLE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0FBQzlELFNBQUs7QUFDTCxRQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUU7QUFDckMsWUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztBQUNsRSxTQUFLO0FBQ0wsUUFDSSxPQUFPLE1BQU0sQ0FBQztBQUNsQixJQUFFLENBQUM7QUFDSDtrREFsRkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxpQkFBaUIsa0JBQzNCLFFBQVEsRUFBRSxFQUFFLGNBQ2I7OGNBQ0k7QUFBQztBQUEwQywwQkFRN0MsS0FBSztBQUFLLDZCQVFWLEtBQUs7QUFBSywrQkFRVixLQUFLO0FBQUssMkJBUVYsS0FBSztBQUFLLDZCQVFWLEtBQUs7QUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEljb25EZWZpbml0aW9uLCBJY29uUHJvcCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mb250YXdlc29tZS1zdmctY29yZSc7XG5pbXBvcnQgeyBGYUljb25Db21wb25lbnQgfSBmcm9tICcuL2ljb24uY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZmEtZHVvdG9uZS1pY29uJyxcbiAgdGVtcGxhdGU6IGBgLFxufSlcbmV4cG9ydCBjbGFzcyBGYUR1b3RvbmVJY29uQ29tcG9uZW50IGV4dGVuZHMgRmFJY29uQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFN3YXAgdGhlIGRlZmF1bHQgb3BhY2l0eSBvZiBlYWNoIGR1b3RvbmUgaWNvbuKAmXMgbGF5ZXJzLiBUaGlzIHdpbGwgbWFrZSBhblxuICAgKiBpY29u4oCZcyBwcmltYXJ5IGxheWVyIGhhdmUgdGhlIGRlZmF1bHQgb3BhY2l0eSBvZiA0MCUgcmF0aGVyIHRoYW4gaXRzXG4gICAqIHNlY29uZGFyeSBsYXllci5cbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIEBJbnB1dCgpIHN3YXBPcGFjaXR5PzogJ3RydWUnIHwgJ2ZhbHNlJyB8IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgb3BhY2l0eSBvZiB0aGUgcHJpbWFyeSBpY29uIGxheWVyLlxuICAgKiBWYWxpZCB2YWx1ZXMgYXJlIGluIHJhbmdlIFswLCAxLjBdLlxuICAgKlxuICAgKiBAZGVmYXVsdCAxLjBcbiAgICovXG4gIEBJbnB1dCgpIHByaW1hcnlPcGFjaXR5Pzogc3RyaW5nIHwgbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDdXN0b21pemUgdGhlIG9wYWNpdHkgb2YgdGhlIHNlY29uZGFyeSBpY29uIGxheWVyLlxuICAgKiBWYWxpZCB2YWx1ZXMgYXJlIGluIHJhbmdlIFswLCAxLjBdLlxuICAgKlxuICAgKiBAZGVmYXVsdCAwLjRcbiAgICovXG4gIEBJbnB1dCgpIHNlY29uZGFyeU9wYWNpdHk/OiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgY29sb3Igb2YgdGhlIHByaW1hcnkgaWNvbiBsYXllci5cbiAgICogQWNjZXB0cyBhbnkgdmFsaWQgQ1NTIGNvbG9yIHZhbHVlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBDU1MgaW5oZXJpdGVkIGNvbG9yXG4gICAqL1xuICBASW5wdXQoKSBwcmltYXJ5Q29sb3I/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEN1c3RvbWl6ZSB0aGUgY29sb3Igb2YgdGhlIHNlY29uZGFyeSBpY29uIGxheWVyLlxuICAgKiBBY2NlcHRzIGFueSB2YWxpZCBDU1MgY29sb3IgdmFsdWUuXG4gICAqXG4gICAqIEBkZWZhdWx0IENTUyBpbmhlcml0ZWQgY29sb3JcbiAgICovXG4gIEBJbnB1dCgpIHNlY29uZGFyeUNvbG9yPzogc3RyaW5nO1xuXG4gIHByb3RlY3RlZCBmaW5kSWNvbkRlZmluaXRpb24oaTogSWNvblByb3AgfCBJY29uRGVmaW5pdGlvbik6IEljb25EZWZpbml0aW9uIHwgbnVsbCB7XG4gICAgY29uc3QgZGVmaW5pdGlvbiA9IHN1cGVyLmZpbmRJY29uRGVmaW5pdGlvbihpKTtcblxuICAgIGlmIChkZWZpbml0aW9uICE9IG51bGwgJiYgIUFycmF5LmlzQXJyYXkoZGVmaW5pdGlvbi5pY29uWzRdKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHNwZWNpZmllZCBpY29uIGRvZXMgbm90IGFwcGVhciB0byBiZSBhIER1b3RvbmUgaWNvbi4gJyArXG4gICAgICAgICAgJ0NoZWNrIHRoYXQgeW91IHNwZWNpZmllZCB0aGUgY29ycmVjdCBzdHlsZTogJyArXG4gICAgICAgICAgYDxmYS1kdW90b25lLWljb24gW2ljb25dPVwiWydmYWQnLCAnJHtkZWZpbml0aW9uLmljb25OYW1lfSddXCI+PC9mYS1kdW90b25lLWljb24+IGAgK1xuICAgICAgICAgIGBvciB1c2U6IDxmYS1pY29uIGljb249XCIke2RlZmluaXRpb24uaWNvbk5hbWV9XCI+PC9mYS1pY29uPiBpbnN0ZWFkLmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZpbml0aW9uO1xuICB9XG5cbiAgcHJvdGVjdGVkIGJ1aWxkUGFyYW1zKCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN1cGVyLmJ1aWxkUGFyYW1zKCk7XG5cbiAgICBpZiAodGhpcy5zd2FwT3BhY2l0eSA9PT0gdHJ1ZSB8fCB0aGlzLnN3YXBPcGFjaXR5ID09PSAndHJ1ZScpIHtcbiAgICAgIHBhcmFtcy5jbGFzc2VzLnB1c2goJ2ZhLXN3YXAtb3BhY2l0eScpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcmltYXJ5T3BhY2l0eSAhPSBudWxsKSB7XG4gICAgICBwYXJhbXMuc3R5bGVzWyctLWZhLXByaW1hcnktb3BhY2l0eSddID0gdGhpcy5wcmltYXJ5T3BhY2l0eS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5zZWNvbmRhcnlPcGFjaXR5ICE9IG51bGwpIHtcbiAgICAgIHBhcmFtcy5zdHlsZXNbJy0tZmEtc2Vjb25kYXJ5LW9wYWNpdHknXSA9IHRoaXMuc2Vjb25kYXJ5T3BhY2l0eS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcmltYXJ5Q29sb3IgIT0gbnVsbCkge1xuICAgICAgcGFyYW1zLnN0eWxlc1snLS1mYS1wcmltYXJ5LWNvbG9yJ10gPSB0aGlzLnByaW1hcnlDb2xvcjtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2Vjb25kYXJ5Q29sb3IgIT0gbnVsbCkge1xuICAgICAgcGFyYW1zLnN0eWxlc1snLS1mYS1zZWNvbmRhcnktY29sb3InXSA9IHRoaXMuc2Vjb25kYXJ5Q29sb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfVxufVxuIl19