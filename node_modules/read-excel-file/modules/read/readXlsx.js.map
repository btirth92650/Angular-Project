{"version":3,"sources":["../../source/read/readXlsx.js"],"names":["parseProperties","parseFilePaths","parseStyles","parseSharedStrings","parseSheet","getData","readXlsx","contents","xml","options","sheet","filePaths","values","sharedStrings","styles","properties","getSheets","sheets","map","name","sheetId","getSheetId","createSheetNotFoundError","data","_sheet","relationId","sheetsList","i","join","Error"],"mappings":"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","sourcesContent":["import parseProperties from './parseProperties'\r\nimport parseFilePaths from './parseFilePaths'\r\nimport parseStyles from './parseStyles'\r\nimport parseSharedStrings from './parseSharedStrings'\r\nimport parseSheet from './parseSheet'\r\nimport getData from './getData'\r\n\r\n// For an introduction in reading `*.xlsx` files see \"The minimum viable XLSX reader\":\r\n// https://www.brendanlong.com/the-minimum-viable-xlsx-reader.html\r\n\r\n/**\r\n * Reads an (unzipped) XLSX file structure into a 2D array of cells.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @param  {number?} options.sheet - Workbook sheet id (`1` by default).\r\n * @param  {string?} options.dateFormat - Date format, e.g. \"mm/dd/yyyy\". Values having this format template set will be parsed as dates.\r\n * @param  {object} contents - A list of XML files inside XLSX file (which is a zipped directory).\r\n * @return {object} An object of shape `{ data, cells, properties }`. `data: string[][]` is an array of rows, each row being an array of cell values. `cells: string[][]` is an array of rows, each row being an array of cells. `properties: object` is the spreadsheet properties (e.g. whether date epoch is 1904 instead of 1900).\r\n */\r\nexport default function readXlsx(contents, xml, options = {}) {\r\n  if (!options.sheet) {\r\n    options = {\r\n      sheet: 1,\r\n      ...options\r\n    }\r\n  }\r\n\r\n  // Some Excel editors don't want to use standard naming scheme for sheet files.\r\n  // https://github.com/tidyverse/readxl/issues/104\r\n  const filePaths = parseFilePaths(contents['xl/_rels/workbook.xml.rels'], xml)\r\n\r\n  // Default file path for \"shared strings\": \"xl/sharedStrings.xml\".\r\n  const values = filePaths.sharedStrings\r\n    ? parseSharedStrings(contents[filePaths.sharedStrings], xml)\r\n    : []\r\n\r\n  // Default file path for \"styles\": \"xl/styles.xml\".\r\n  const styles = filePaths.styles\r\n    ? parseStyles(contents[filePaths.styles], xml)\r\n    : {}\r\n\r\n  const properties = parseProperties(contents['xl/workbook.xml'], xml)\r\n\r\n  // A feature for getting the list of sheets in an Excel file.\r\n  // https://github.com/catamphetamine/read-excel-file/issues/14\r\n  if (options.getSheets) {\r\n    return properties.sheets.map(({ name }) => ({\r\n      name\r\n    }))\r\n  }\r\n\r\n  // Find the sheet by name, or take the first one.\r\n  const sheetId = getSheetId(options.sheet, properties.sheets)\r\n\r\n  // If the sheet wasn't found then throw an error.\r\n  // Example: \"xl/worksheets/sheet1.xml\".\r\n  if (!sheetId || !filePaths.sheets[sheetId]) {\r\n    throw createSheetNotFoundError(options.sheet, properties.sheets)\r\n  }\r\n\r\n  // Parse sheet data.\r\n  const sheet = parseSheet(\r\n    contents[filePaths.sheets[sheetId]],\r\n    xml,\r\n    values,\r\n    styles,\r\n    properties,\r\n    options\r\n  )\r\n\r\n  // Get spreadsheet data.\r\n  const data = getData(sheet, options)\r\n\r\n  // Can return properties, if required.\r\n  if (options.properties) {\r\n    return {\r\n      data,\r\n      properties\r\n    }\r\n  }\r\n\r\n  // Return spreadsheet data.\r\n  return data\r\n}\r\n\r\nfunction getSheetId(sheet, sheets) {\r\n  if (typeof sheet === 'number') {\r\n    const _sheet = sheets[sheet - 1]\r\n    return _sheet && _sheet.relationId\r\n  }\r\n  for (const _sheet of sheets) {\r\n    if (_sheet.name === sheet) {\r\n      return _sheet.relationId\r\n    }\r\n  }\r\n}\r\n\r\nfunction createSheetNotFoundError(sheet, sheets) {\r\n  const sheetsList = sheets && sheets.map((sheet, i) => `\"${sheet.name}\" (#${i + 1})`).join(', ')\r\n  return new Error(`Sheet ${typeof sheet === 'number' ? '#' + sheet : '\"' + sheet + '\"'} not found in the *.xlsx file.${sheets ? ' Available sheets: ' + sheetsList + '.' : ''}`)\r\n}"],"file":"readXlsx.js"}