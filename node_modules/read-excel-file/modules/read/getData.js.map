{"version":3,"sources":["../../source/read/getData.js"],"names":["dropEmptyRows","dropEmptyColumns","getData","sheet","options","dimensions","cells","length","leftTop","rightBottom","colsCount","column","rowsCount","row","data","Array","i","j","cell","value","rowMap","onlyTrimAtTheEnd","transformData"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAC9C,MAAQC,UAAR,GAA8BF,KAA9B,CAAQE,UAAR;AAAA,MAAoBC,KAApB,GAA8BH,KAA9B,CAAoBG,KAApB,CAD8C,CAG9C;;AACA,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD;;AAED,mCAA+BF,UAA/B;AAAA,MAAOG,OAAP;AAAA,MAAgBC,WAAhB;;AAEA,MAAMC,SAAS,GAAID,WAAW,CAACE,MAAZ,GAAqBH,OAAO,CAACG,MAA9B,GAAwC,CAA1D;AACA,MAAMC,SAAS,GAAIH,WAAW,CAACI,GAAZ,GAAkBL,OAAO,CAACK,GAA3B,GAAkC,CAApD,CAX8C,CAa9C;;AACA,MAAIC,IAAI,GAAG,IAAIC,KAAJ,CAAUH,SAAV,CAAX;AACA,MAAII,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGJ,SAAX,EAAsB;AACpBE,IAAAA,IAAI,CAACE,CAAD,CAAJ,GAAU,IAAID,KAAJ,CAAUL,SAAV,CAAV;AACA,QAAIO,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAGP,SAAX,EAAsB;AACpBI,MAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQC,CAAR,IAAa,IAAb;AACAA,MAAAA,CAAC;AACF;;AACDD,IAAAA,CAAC;AACF,GAxB6C,CA0B9C;AACA;AACA;AACA;;;AACA,uDAAmBV,KAAnB,wCAA0B;AAAA,QAAfY,IAAe;AACxB,QAAML,GAAG,GAAGK,IAAI,CAACL,GAAL,GAAWL,OAAO,CAACK,GAA/B;AACA,QAAMF,MAAM,GAAGO,IAAI,CAACP,MAAL,GAAcH,OAAO,CAACG,MAArC;AACAG,IAAAA,IAAI,CAACD,GAAD,CAAJ,CAAUF,MAAV,IAAoBO,IAAI,CAACC,KAAzB;AACD,GAlC6C,CAoC9C;;;AACA,MAAQC,MAAR,GAAmBhB,OAAnB,CAAQgB,MAAR;;AACA,MAAIA,MAAJ,EAAY;AACV,QAAIJ,GAAC,GAAG,CAAR;;AACA,WAAOA,GAAC,GAAGF,IAAI,CAACP,MAAhB,EAAwB;AACtBa,MAAAA,MAAM,CAACJ,GAAD,CAAN,GAAYA,GAAZ;AACAA,MAAAA,GAAC;AACF;AACF,GA5C6C,CA8C9C;;;AACAF,EAAAA,IAAI,GAAGd,aAAa,CAClBC,gBAAgB,CAACa,IAAD,EAAO;AAAEO,IAAAA,gBAAgB,EAAE;AAApB,GAAP,CADE,EAElB;AAAEA,IAAAA,gBAAgB,EAAE,IAApB;AAA0BD,IAAAA,MAAM,EAANA;AAA1B,GAFkB,CAApB,CA/C8C,CAoD9C;;AACA,MAAIhB,OAAO,CAACkB,aAAZ,EAA2B;AACzBR,IAAAA,IAAI,GAAGV,OAAO,CAACkB,aAAR,CAAsBR,IAAtB,CAAP,CADyB,CAEzB;AACA;AACA;AACA;AACA;AACD;;AAED,SAAOA,IAAP;AACD","sourcesContent":["import dropEmptyRows from './dropEmptyRows'\r\nimport dropEmptyColumns from './dropEmptyColumns'\r\n\r\nexport default function getData(sheet, options) {\r\n  const { dimensions, cells } = sheet\r\n\r\n  // If the sheet is empty.\r\n  if (cells.length === 0) {\r\n    return []\r\n  }\r\n\r\n  const [leftTop, rightBottom] = dimensions\r\n\r\n  const colsCount = (rightBottom.column - leftTop.column) + 1\r\n  const rowsCount = (rightBottom.row - leftTop.row) + 1\r\n\r\n  // Initialize spreadsheet data structure.\r\n  let data = new Array(rowsCount)\r\n  let i = 0\r\n  while (i < rowsCount) {\r\n    data[i] = new Array(colsCount)\r\n    let j = 0\r\n    while (j < colsCount) {\r\n      data[i][j] = null\r\n      j++\r\n    }\r\n    i++\r\n  }\r\n\r\n  // Fill in spreadsheet data structure.\r\n  // (this code implies that `cells` aren't necessarily sorted by row and column:\r\n  //  maybe that's not correct, this piece code was initially copy-pasted\r\n  //  from some other library that used `XPath`)\r\n  for (const cell of cells) {\r\n    const row = cell.row - leftTop.row\r\n    const column = cell.column - leftTop.column\r\n    data[row][column] = cell.value\r\n  }\r\n\r\n  // Fill in the row map.\r\n  const { rowMap } = options\r\n  if (rowMap) {\r\n    let i = 0\r\n    while (i < data.length) {\r\n      rowMap[i] = i\r\n      i++\r\n    }\r\n  }\r\n\r\n  // Drop empty columns or rows.\r\n  data = dropEmptyRows(\r\n    dropEmptyColumns(data, { onlyTrimAtTheEnd: true }),\r\n    { onlyTrimAtTheEnd: true, rowMap }\r\n  )\r\n\r\n  // Optionally transform data before applying `schema`.\r\n  if (options.transformData) {\r\n    data = options.transformData(data)\r\n    // data = options.transformData(data, {\r\n    //   dropEmptyRowsAndColumns(data) {\r\n    //     return dropEmptyRows(dropEmptyColumns(data), { rowMap })\r\n    //   }\r\n    // })\r\n  }\r\n\r\n  return data\r\n}"],"file":"getData.js"}