{"ast":null,"code":"import { Injectable, Component, EventEmitter, Injector, Directive, ViewContainerRef, ElementRef, ComponentFactoryResolver, Renderer2, Input, Output, HostListener, InjectionToken, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { positionElements } from 'positioning';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template_button_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const options_r3 = ɵngcc0.ɵɵnextContext().options;\n      return options_r3.onCancel({\n        clickEvent: $event\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const options_r3 = ɵngcc0.ɵɵnextContext().options;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(\"btn btn-block btn-\" + options_r3.cancelButtonType);\n    ɵngcc0.ɵɵproperty(\"mwlFocus\", options_r3.focusButton === \"cancel\")(\"innerHtml\", options_r3.cancelText, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template_button_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const options_r3 = ɵngcc0.ɵɵnextContext().options;\n      return options_r3.onConfirm({\n        clickEvent: $event\n      });\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const options_r3 = ɵngcc0.ɵɵnextContext().options;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMap(\"btn btn-block btn-\" + options_r3.confirmButtonType);\n    ɵngcc0.ɵɵproperty(\"mwlFocus\", options_r3.focusButton === \"confirm\")(\"innerHtml\", options_r3.confirmText, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nconst _c0 = function (a1, a2, a3, a4) {\n  return [\"popover\", a1, a2, a3, a4];\n};\n\nfunction ConfirmationPopoverWindowComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵelement(1, \"div\", 3);\n    ɵngcc0.ɵɵelement(2, \"h3\", 4);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 5);\n    ɵngcc0.ɵɵelement(4, \"p\", 6);\n    ɵngcc0.ɵɵelementStart(5, \"div\", 7);\n    ɵngcc0.ɵɵtemplate(6, ConfirmationPopoverWindowComponent_ng_template_0_div_6_Template, 2, 4, \"div\", 8);\n    ɵngcc0.ɵɵtemplate(7, ConfirmationPopoverWindowComponent_ng_template_0_div_7_Template, 2, 4, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const options_r3 = ctx.options;\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction4(7, _c0, options_r3.placement, \"popover-\" + options_r3.placement, \"bs-popover-\" + options_r3.placement, options_r3.popoverClass));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", options_r3.popoverTitle, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", options_r3.popoverMessage, ɵngcc0.ɵɵsanitizeHtml);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"confirm-btns-reversed\", options_r3.reverseButtonOrder);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !options_r3.hideCancelButton);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !options_r3.hideConfirmButton);\n  }\n}\n\nfunction ConfirmationPopoverWindowComponent_ng_template_2_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    options: a0\n  };\n};\n\nlet ConfirmationPopoverOptions = /*#__PURE__*/(() => {\n  class ConfirmationPopoverOptions {\n    constructor() {\n      this.confirmText = 'Confirm';\n      this.cancelText = 'Cancel';\n      this.confirmButtonType = 'success';\n      this.cancelButtonType = 'outline-secondary';\n      this.placement = 'top';\n      this.hideConfirmButton = false;\n      this.hideCancelButton = false;\n      this.popoverClass = '';\n      this.appendToBody = false;\n      this.reverseButtonOrder = false;\n      this.closeOnOutsideClick = true;\n    }\n\n  }\n\n  ConfirmationPopoverOptions.ɵfac = function ConfirmationPopoverOptions_Factory(t) {\n    return new (t || ConfirmationPopoverOptions)();\n  };\n\n  ConfirmationPopoverOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ConfirmationPopoverOptions,\n    factory: ConfirmationPopoverOptions.ɵfac\n  });\n  return ConfirmationPopoverOptions;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @internal\n */\n\n\nlet ConfirmationPopoverWindowOptions = /*#__PURE__*/(() => {\n  class ConfirmationPopoverWindowOptions extends ConfirmationPopoverOptions {}\n\n  ConfirmationPopoverWindowOptions.ɵfac = /*@__PURE__*/function () {\n    let ɵConfirmationPopoverWindowOptions_BaseFactory;\n    return function ConfirmationPopoverWindowOptions_Factory(t) {\n      return (ɵConfirmationPopoverWindowOptions_BaseFactory || (ɵConfirmationPopoverWindowOptions_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ConfirmationPopoverWindowOptions)))(t || ConfirmationPopoverWindowOptions);\n    };\n  }();\n\n  ConfirmationPopoverWindowOptions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ConfirmationPopoverWindowOptions,\n    factory: ConfirmationPopoverWindowOptions.ɵfac\n  });\n  return ConfirmationPopoverWindowOptions;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @internal\n */\n\n\nlet ConfirmationPopoverWindowComponent = /*#__PURE__*/(() => {\n  class ConfirmationPopoverWindowComponent {\n    constructor(options) {\n      this.options = options;\n    }\n\n    ngAfterViewInit() {\n      this.options.onAfterViewInit();\n    }\n\n  }\n\n  ConfirmationPopoverWindowComponent.ɵfac = function ConfirmationPopoverWindowComponent_Factory(t) {\n    return new (t || ConfirmationPopoverWindowComponent)(ɵngcc0.ɵɵdirectiveInject(ConfirmationPopoverWindowOptions));\n  };\n\n  ConfirmationPopoverWindowComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ConfirmationPopoverWindowComponent,\n    selectors: [[\"mwl-confirmation-popover-window\"]],\n    decls: 3,\n    vars: 4,\n    consts: [[\"defaultTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\"], [1, \"popover-arrow\", \"arrow\"], [1, \"popover-title\", \"popover-header\", 3, \"innerHTML\"], [1, \"popover-content\", \"popover-body\"], [3, \"innerHTML\"], [1, \"confirm-btns\"], [\"class\", \"confirm-btn-container\", 4, \"ngIf\"], [1, \"confirm-btn-container\"], [\"type\", \"button\", 3, \"mwlFocus\", \"innerHtml\", \"click\"]],\n    template: function ConfirmationPopoverWindowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ConfirmationPopoverWindowComponent_ng_template_0_Template, 8, 12, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(2, ConfirmationPopoverWindowComponent_ng_template_2_Template, 0, 0, \"ng-template\", 1);\n      }\n\n      if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.options.customTemplate || _r0)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx.options));\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgClass, ɵngcc1.NgIf, FocusDirective];\n    },\n    styles: [\".popover[_ngcontent-%COMP%]{display:block}.bs-popover-bottom[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-top[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%]{left:50%}.bs-popover-left[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%], .bs-popover-right[_ngcontent-%COMP%]   .arrow[_ngcontent-%COMP%]{top:calc(50% - 8px)}.btn[_ngcontent-%COMP%]{transition:none}.confirm-btns[_ngcontent-%COMP%]{display:flex;justify-content:space-around}.confirm-btn-container[_ngcontent-%COMP%]{flex-basis:50%}.confirm-btn-container[_ngcontent-%COMP%]:not(:first-child){margin-left:4px}.confirm-btn-container[_ngcontent-%COMP%]:not(:last-child){margin-right:4px}.confirm-btns-reversed[_ngcontent-%COMP%]{flex-direction:row-reverse}.confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:first-child){margin-left:0;margin-right:4px}.confirm-btns-reversed[_ngcontent-%COMP%]   .confirm-btn-container[_ngcontent-%COMP%]:not(:last-child){margin-left:4px;margin-right:0}\"]\n  });\n  return ConfirmationPopoverWindowComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n ```html\n <button\n   class=\"btn btn-outline-secondary\"\n   mwlConfirmationPopover\n   [popoverTitle]=\"popoverTitle\"\n   [popoverMessage]=\"popoverMessage\"\n   placement=\"left\"\n   (confirm)=\"confirmClicked = true\"\n   (cancel)=\"cancelClicked = true\"\n   [(isOpen)]=\"isOpen\">\n    Show confirm popover!\n  </button>\n  ```\n */\n\n\nlet ConfirmationPopoverDirective = /*#__PURE__*/(() => {\n  class ConfirmationPopoverDirective {\n    /**\n     * @internal\n     */\n    constructor(viewContainerRef, elm, defaultOptions, cfr, renderer) {\n      this.viewContainerRef = viewContainerRef;\n      this.elm = elm;\n      this.defaultOptions = defaultOptions;\n      this.cfr = cfr;\n      this.renderer = renderer;\n      /**\n       * Whether to disable showing the popover. Default `false`.\n       */\n\n      this.isDisabled = false;\n      /**\n       * Will open or show the popover when changed.\n       * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n       */\n\n      this.isOpen = false;\n      /**\n       * Will emit when the popover is opened or closed\n       */\n\n      this.isOpenChange = new EventEmitter(true);\n      /**\n       * An expression that is called when the confirm button is clicked.\n       */\n\n      this.confirm = new EventEmitter();\n      /**\n       * An expression that is called when the cancel button is clicked.\n       */\n\n      this.cancel = new EventEmitter();\n      this.eventListeners = [];\n    }\n    /**\n     * @internal\n     */\n\n\n    ngOnInit() {\n      this.isOpenChange.emit(false);\n    }\n    /**\n     * @internal\n     */\n\n\n    ngOnChanges(changes) {\n      if (changes.isOpen) {\n        if (changes.isOpen.currentValue === true) {\n          this.showPopover();\n        } else {\n          this.hidePopover();\n        }\n      }\n    }\n    /**\n     * @internal\n     */\n\n\n    ngOnDestroy() {\n      this.hidePopover();\n    }\n    /**\n     * @internal\n     */\n\n\n    onConfirm(event) {\n      this.confirm.emit(event);\n      this.hidePopover();\n    }\n    /**\n     * @internal\n     */\n\n\n    onCancel(event) {\n      this.cancel.emit(event);\n      this.hidePopover();\n    }\n    /**\n     * @internal\n     */\n\n\n    togglePopover() {\n      if (!this.popover) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n\n    onDocumentClick(event) {\n      const closeOnOutsideClick = typeof this.closeOnOutsideClick !== 'undefined' ? this.closeOnOutsideClick : this.defaultOptions.closeOnOutsideClick;\n\n      if (this.popover && !this.elm.nativeElement.contains(event.target) && !this.popover.location.nativeElement.contains(event.target) && closeOnOutsideClick) {\n        this.hidePopover();\n      }\n    }\n\n    showPopover() {\n      if (!this.popover && !this.isDisabled) {\n        // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n        // otherwise the document click event gets fired after the click event\n        // that triggered the popover to open (no idea why this is so)\n        setTimeout(() => {\n          this.eventListeners = [this.renderer.listen('document', 'click', event => this.onDocumentClick(event)), this.renderer.listen('document', 'touchend', event => this.onDocumentClick(event)), this.renderer.listen('window', 'resize', () => this.positionPopover())];\n        });\n        const options = new ConfirmationPopoverWindowOptions();\n        Object.assign(options, this.defaultOptions, {\n          onConfirm: event => {\n            this.onConfirm(event);\n          },\n          onCancel: event => {\n            this.onCancel(event);\n          },\n          onAfterViewInit: () => {\n            this.positionPopover();\n          }\n        });\n        const optionalParams = ['confirmText', 'cancelText', 'placement', 'confirmButtonType', 'cancelButtonType', 'focusButton', 'hideConfirmButton', 'hideCancelButton', 'popoverClass', 'appendToBody', 'customTemplate', 'reverseButtonOrder', 'popoverTitle', 'popoverMessage'];\n        optionalParams.forEach(param => {\n          if (typeof this[param] !== 'undefined') {\n            options[param] = this[param];\n          }\n        });\n        const componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n        const childInjector = Injector.create({\n          providers: [{\n            provide: ConfirmationPopoverWindowOptions,\n            useValue: options\n          }]\n        });\n        this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n\n        if (options.appendToBody) {\n          document.body.appendChild(this.popover.location.nativeElement);\n        }\n\n        this.isOpenChange.emit(true);\n      }\n    }\n\n    positionPopover() {\n      if (this.popover) {\n        const popoverElement = this.popover.location.nativeElement.children[0];\n        positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);\n      }\n    }\n\n    hidePopover() {\n      if (this.popover) {\n        this.popover.destroy();\n        delete this.popover;\n        this.isOpenChange.emit(false);\n        this.eventListeners.forEach(fn => fn());\n        this.eventListeners = [];\n      }\n    }\n\n  }\n\n  ConfirmationPopoverDirective.ɵfac = function ConfirmationPopoverDirective_Factory(t) {\n    return new (t || ConfirmationPopoverDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ConfirmationPopoverOptions), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  ConfirmationPopoverDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ConfirmationPopoverDirective,\n    selectors: [[\"\", \"mwlConfirmationPopover\", \"\"]],\n    hostBindings: function ConfirmationPopoverDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ConfirmationPopoverDirective_click_HostBindingHandler() {\n          return ctx.togglePopover();\n        });\n      }\n    },\n    inputs: {\n      isDisabled: \"isDisabled\",\n      isOpen: \"isOpen\",\n      popoverTitle: \"popoverTitle\",\n      popoverMessage: \"popoverMessage\",\n      confirmText: \"confirmText\",\n      cancelText: \"cancelText\",\n      placement: \"placement\",\n      confirmButtonType: \"confirmButtonType\",\n      cancelButtonType: \"cancelButtonType\",\n      focusButton: \"focusButton\",\n      hideConfirmButton: \"hideConfirmButton\",\n      hideCancelButton: \"hideCancelButton\",\n      customTemplate: \"customTemplate\",\n      popoverClass: \"popoverClass\",\n      appendToBody: \"appendToBody\",\n      reverseButtonOrder: \"reverseButtonOrder\",\n      closeOnOutsideClick: \"closeOnOutsideClick\"\n    },\n    outputs: {\n      isOpenChange: \"isOpenChange\",\n      confirm: \"confirm\",\n      cancel: \"cancel\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return ConfirmationPopoverDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\n\n\nlet FocusDirective = /*#__PURE__*/(() => {\n  class FocusDirective {\n    constructor(elm) {\n      this.elm = elm;\n    }\n\n    ngOnChanges(changes) {\n      if (changes.mwlFocus && this.mwlFocus === true) {\n        this.elm.nativeElement.focus();\n      }\n    }\n\n  }\n\n  FocusDirective.ɵfac = function FocusDirective_Factory(t) {\n    return new (t || FocusDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  FocusDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FocusDirective,\n    selectors: [[\"\", \"mwlFocus\", \"\"]],\n    inputs: {\n      mwlFocus: \"mwlFocus\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return FocusDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst USER_OPTIONS = new InjectionToken('confirmation popover user options');\n\nfunction optionsFactory(userOptions) {\n  const options = new ConfirmationPopoverOptions();\n  Object.assign(options, userOptions);\n  return options;\n}\n\nlet ConfirmationPopoverModule = /*#__PURE__*/(() => {\n  class ConfirmationPopoverModule {\n    static forRoot(options = {}) {\n      return {\n        ngModule: ConfirmationPopoverModule,\n        providers: [{\n          provide: USER_OPTIONS,\n          useValue: options\n        }, {\n          provide: ConfirmationPopoverOptions,\n          useFactory: optionsFactory,\n          deps: [USER_OPTIONS]\n        }]\n      };\n    }\n\n  }\n\n  ConfirmationPopoverModule.ɵfac = function ConfirmationPopoverModule_Factory(t) {\n    return new (t || ConfirmationPopoverModule)();\n  };\n\n  ConfirmationPopoverModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ConfirmationPopoverModule\n  });\n  ConfirmationPopoverModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ConfirmationPopoverModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ConfirmationPopoverModule, {\n    declarations: function () {\n      return [ConfirmationPopoverDirective, ConfirmationPopoverWindowComponent, FocusDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ConfirmationPopoverDirective, FocusDirective];\n    }\n  });\n})();\n/*\n * Public API Surface of angular-confirmation-popover\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ConfirmationPopoverDirective, ConfirmationPopoverModule, FocusDirective, USER_OPTIONS as ɵa, optionsFactory as ɵb, ConfirmationPopoverOptions as ɵc, ConfirmationPopoverWindowComponent as ɵd, ConfirmationPopoverWindowOptions as ɵe }; //# sourceMappingURL=angular-confirmation-popover.js.map","map":null,"metadata":{},"sourceType":"module"}