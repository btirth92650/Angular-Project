import { Injectable } from '@angular/core';
import { NgbConfig } from '../ngb-config';
import * as i0 from "@angular/core";
import * as i1 from "../ngb-config";
/**
 * Configuration service for the NgbToast component. You can inject this service, typically in your root component,
 * and customize the values of its properties in order to provide default values for all the toasts used in the
 * application.
 *
 * @since 5.0.0
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../ngb-config';
export class NgbToastConfig {
    constructor(_ngbConfig) {
        this._ngbConfig = _ngbConfig;
        this.autohide = true;
        this.delay = 500;
        this.ariaLive = 'polite';
    }
    get animation() { return (this._animation === undefined) ? this._ngbConfig.animation : this._animation; }
    set animation(animation) { this._animation = animation; }
}
NgbToastConfig.ɵfac = function NgbToastConfig_Factory(t) { return new (t || NgbToastConfig)(ɵngcc0.ɵɵinject(ɵngcc1.NgbConfig)); };
NgbToastConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgbToastConfig_Factory() { return new NgbToastConfig(i0.ɵɵinject(i1.NgbConfig)); }, token: NgbToastConfig, providedIn: "root" });
NgbToastConfig.ctorParameters = () => [
    { type: NgbConfig }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgbToastConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc1.NgbConfig }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY29uZmlnLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdG9hc3QvdG9hc3QtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN4QztBQUVnQztBQTBCaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7O0FBRUgsTUFBTSxPQUFPLGNBQWM7QUFBRyxJQU81QixZQUFvQixVQUFxQjtBQUFJLFFBQXpCLGVBQVUsR0FBVixVQUFVLENBQVc7QUFBQyxRQU4xQyxhQUFRLEdBQUcsSUFBSSxDQUFDO0FBQ2xCLFFBQUUsVUFBSyxHQUFHLEdBQUcsQ0FBQztBQUNkLFFBQUUsYUFBUSxHQUF1QixRQUFRLENBQUM7QUFDMUMsSUFHOEMsQ0FBQztBQUMvQyxJQUNFLElBQUksU0FBUyxLQUFjLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDcEgsSUFBRSxJQUFJLFNBQVMsQ0FBQyxTQUFrQixJQUFJLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUNwRTtrSUFBQztBQUNELGtNQVpLO0FBQUM7RUFETCxVQUFVLFNBQUMsRUFBQyx2QkFDaUMsWUFyQ3RDLFNBQVM7QUFBRztNQW9DRyxFQUFFLE1BQU0sRUFBQzs7OzBFQXBDVjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdiQ29uZmlnfSBmcm9tICcuLi9uZ2ItY29uZmlnJztcblxuLyoqXG4gKiBJbnRlcmZhY2UgdXNlZCB0byB0eXBlIGFsbCB0b2FzdCBjb25maWcgb3B0aW9ucy4gU2VlIGBOZ2JUb2FzdENvbmZpZ2AuXG4gKlxuICogQHNpbmNlIDUuMC4wXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmdiVG9hc3RPcHRpb25zIHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgaWYgdGhlIHRvYXN0IGNvbXBvbmVudCBzaG91bGQgZW1pdCB0aGUgYGhpZGUoKWAgb3V0cHV0XG4gICAqIGFmdGVyIGEgY2VydGFpbiBgZGVsYXlgIGluIG1zLlxuICAgKi9cbiAgYXV0b2hpZGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZWxheSBpbiBtcyBhZnRlciB3aGljaCB0aGUgYGhpZGUoKWAgb3V0cHV0IHNob3VsZCBiZSBlbWl0dGVkLlxuICAgKi9cbiAgZGVsYXk/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFR5cGUgb2YgYXJpYS1saXZlIGF0dHJpYnV0ZSB0byBiZSB1c2VkLlxuICAgKlxuICAgKiBDb3VsZCBiZSBvbmUgb2YgdGhlc2UgMiB2YWx1ZXMgKGFzIHN0cmluZyk6XG4gICAqIC0gYHBvbGl0ZWAgKGRlZmF1bHQpXG4gICAqIC0gYGFsZXJ0YFxuICAgKi9cbiAgYXJpYUxpdmU/OiAncG9saXRlJyB8ICdhbGVydCc7XG59XG5cbi8qKlxuICogQ29uZmlndXJhdGlvbiBzZXJ2aWNlIGZvciB0aGUgTmdiVG9hc3QgY29tcG9uZW50LiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LFxuICogYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgdG9hc3RzIHVzZWQgaW4gdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAc2luY2UgNS4wLjBcbiAqL1xuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTmdiVG9hc3RDb25maWcgaW1wbGVtZW50cyBOZ2JUb2FzdE9wdGlvbnMge1xuICBhdXRvaGlkZSA9IHRydWU7XG4gIGRlbGF5ID0gNTAwO1xuICBhcmlhTGl2ZTogJ3BvbGl0ZScgfCAnYWxlcnQnID0gJ3BvbGl0ZSc7XG5cbiAgcHJpdmF0ZSBfYW5pbWF0aW9uOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX25nYkNvbmZpZzogTmdiQ29uZmlnKSB7fVxuXG4gIGdldCBhbmltYXRpb24oKTogYm9vbGVhbiB7IHJldHVybiAodGhpcy5fYW5pbWF0aW9uID09PSB1bmRlZmluZWQpID8gdGhpcy5fbmdiQ29uZmlnLmFuaW1hdGlvbiA6IHRoaXMuX2FuaW1hdGlvbjsgfVxuICBzZXQgYW5pbWF0aW9uKGFuaW1hdGlvbjogYm9vbGVhbikgeyB0aGlzLl9hbmltYXRpb24gPSBhbmltYXRpb247IH1cbn1cbiJdfQ==